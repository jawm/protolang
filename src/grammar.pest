WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "#" ~ (!NEWLINE~ANY)* ~ NEWLINE}

keywords = @{
	(
    "and" |
    "break" |
    "continue" |
    "else" |
    "excl" |
    "fn" |
    "for" |
    "if" |
    "import" |
    "in" |
    "move" |
    "nonlocal" |
    "or" |
    "return" |
    "while"
    ) ~ !(ASCII_ALPHANUMERIC | "_")
}

file = _{ SOI ~ multiple_expression ~ EOI }

multiple_expression = !{ NEWLINE* ~ expression? ~ (NEWLINE* ~ expression)* ~ NEWLINE* }

expression = ${
	block |
    assign |
    function |
    body_ret |
    if_expr
}

block = { ("{" ~ multiple_expression ~ "}")}
assign = !{ ident ~ "=" ~ expression }
function = !{ "fn" ~ "(" ~ params? ~ ")" ~ signature_ret ~ expression }
params = { parameter? ~ ("," ~ parameter)* }
parameter = ${ shared_param | excl_param | move_param }
shared_param = { ident ~ lifetime? }
excl_param = { "excl " ~ ident ~ lifetime? }
move_param = { "move " ~ ident }
signature_ret = !{ no_return | shared_return | excl_return | move_return }
no_return = { "_" }
shared_return = { "return" ~ lifetime? }
excl_return = { "excl return" ~ lifetime? }
move_return = { "move return" }
lifetime = { "'" ~ ident }
ident = @{ !keywords ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
body_ret = ${ "return" ~ (" " ~ expression)? }

if_expr = !{
	if_help |
    while_expr
}

if_help = { "if" ~ expression ~ expression ~ ( "else" ~ expression )? }

while_expr = {
	while_help |
    logic_or
}

while_help = { "while" ~ expression ~ expression }

logic_or = { logic_and ~ logic_or_help* }
logic_or_help = { logic_or_op ~ logic_and }
logic_or_op = { "or" }

logic_and = { equality ~ logic_and_help* }
logic_and_help = { logic_and_op ~ equality }
logic_and_op = { "and" }

equality = {comparison ~ equality_help* }
equality_help = { equality_op ~ comparison }
equality_op = { "!=" | "==" }

comparison = { addition ~ comparison_help* }
comparison_help = { comparison_op ~ addition }
comparison_op = { ">" | ">=" | "<" | "<=" }

addition = { multiplication ~ addition_help* }
addition_help = { addition_op ~ multiplication }
addition_op = { "+" | "-" }

multiplication = { unary ~ multiplication_help* }
multiplication_help = { multiplication_op ~ unary }
multiplication_op = { "*" | "/" }

unary = { unary_op ~ unary | call }
unary_op = { "!" | "-" }

call = { primary ~ args? }
args = { "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

primary = {
	number |
    string |
    boolean |
    grouping |
    variable
}

number = @{NUMBER+ ~ ("."~NUMBER+)?}

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = {
	(
    	(&"\\\"" ~ "\\\"") | // an escaped double quote
		(!"\"") ~ ANY        // Any other character that isn't a double quote
    )*
}

boolean = { "true" | "false" }
grouping = { "(" ~ expression ~ ")" }
variable = ${ ident }